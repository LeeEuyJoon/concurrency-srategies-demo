services:
  # 실험용 RDB 컨테이너 - MySQL
  db:
    image: mysql:8.0
    environment:
      MYSQL_DATABASE:       concurrency_test
      MYSQL_USER:           test_user
      MYSQL_PASSWORD:       test_password
      MYSQL_ROOT_PASSWORD:  root_password
    ports:
      - '3306:3306'
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-proot_password"]
      retries: 10
      interval: 3s
      start_period: 30s

  # 애플리케이션 인스턴스 - Spring Boot
  app:
    build:
      context: .
      dockerfile: Dockerfile
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      SPRING_DATASOURCE_URL:      jdbc:mysql://db:3306/concurrency_test
      SPRING_DATASOURCE_USERNAME: test_user
      SPRING_DATASOURCE_PASSWORD: test_password
      # Redis 연결 설정
      SPRING_DATA_REDIS_HOST:     redis
      SPRING_DATA_REDIS_PORT:     6379
    ports:
      - '8080'

  # 로드밸런서 - Nginx
  nginx:
    image: nginx:latest
    depends_on:
      - app
    ports:
      - '8081:80'
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro

# 메트릭 수집 - Prometheus
  prometheus:
    image: prom/prometheus:latest
    depends_on:
      - app
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'

# 메트릭 시각화 - Grafana
  grafana:
    image: grafana/grafana-oss:latest
    depends_on:
      - prometheus
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_SECURITY_ADMIN_USER=admin
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning:ro

  # Redis for distributed locks
  redis:
    image: redis:7-alpine
    container_name: concurrency-redis
    ports:
      - "6379:6379"
    command: >
      redis-server 
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
